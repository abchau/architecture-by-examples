<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.github.abchau.oss.archexamples</groupId>
		<artifactId>archexamples-parent</artifactId>
		<version>0.5.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<artifactId>layered-hex</artifactId>

	<name>layered-hex</name>
	<description>Hexagonal Architecture</description>
    <url>https://github.com/abchau/arch-examples/layered-hex</url>
    <inceptionYear>2022</inceptionYear>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<java.version>21</java.version>
        <lombok.version>1.18.22</lombok.version>
		<archunit.version>0.23.1</archunit.version>
		<jmolecules.version>1.6.0</jmolecules.version>
		<modulith.version>1.3.0</modulith.version>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.validation</groupId>
			<artifactId>jakarta.validation-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.tngtech.archunit</groupId>
			<artifactId>archunit-junit5</artifactId>
			<version>${archunit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jmolecules</groupId>
			<artifactId>jmolecules-hexagonal-architecture</artifactId>
			<version>${jmolecules.version}</version>
		</dependency>
	</dependencies>

	<build>
        <finalName>${project.artifactId}-${project.version}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
                <configuration>
                    <parallel>methods</parallel>
                    <useUnlimitedThreads>true</useUnlimitedThreads>
                </configuration>
			</plugin>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.1</version>
				<dependencies>
					<dependency>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctorj</artifactId>
						<version>2.5.2</version>
					</dependency>
					<dependency>
						<groupId>org.asciidoctor</groupId>
						<artifactId>asciidoctorj-diagram</artifactId>
						<version>2.2.1</version>
					</dependency>
				</dependencies>
                <configuration>
					<sourceDirectory>src/main/asciidoc</sourceDirectory>
					<sourceDocumentName>index.adoc</sourceDocumentName>
					<outputDirectory>${project.build.directory}/generated-docs</outputDirectory>
					<requires>
						<require>asciidoctor-diagram</require>
					</requires>
                    <attributes>
                    <!-- Example below shows how to specify in this pom instead of System's PATH, the location of dot command of Graphviz, required by PlantUML libraries -->
                    <!-- Windows:
                        <graphvizdot>C:\Program Files (x86)\Graphviz2.38\bin\dot.exe</graphvizdot>
                    -->
                    <!-- *nix :
                        <graphvizdot>/usr/local/bin/dot</graphvizdot>
                    -->
                    </attributes>
                </configuration>
				<executions>
					<!-- generate docs from ${snippetsDirectory}/index.adoc to target/generated-docs/ -->
					<execution>
						<!-- normally should use this but we want to include snippets generated during test phase -->
                        <!-- <id>generate-html-doc</id><phase>generate-resources</phase> -->
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
							<!-- these will override Asciidoctor attributes inside *.adoc file -->
							<attributes>
								<highlightjsdir>js/highlight</highlightjsdir>
								<icons>font</icons>
								<linkcss>true</linkcss>
								<numbered>true</numbered>
								<sectanchors>true</sectanchors>
								<source-highlighter>highlight.js</source-highlighter>
								<!-- <stylesdir>css/</stylesdir>
								<stylesheet>custom.css</stylesheet> -->
								<toc>left</toc>
								<version>${project.version}</version>
								<!-- snippets for Spring Rest Docs -->
								<snippets>${project.build.directory}/generated-snippets</snippets>
							</attributes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<!-- copy generated ascii output to jar -->
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/generated-docs</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>2.5.0</version>
                <configuration>
					<from>                           
						<image>openjdk:alpine</image>
					</from>
                    <to>
                        <image>${image.path}</image>
						 <!-- auth {
							username = property('tomsRepoUsername')
							password = property('tomsRepoPassword')
						} -->
                    </to>
					<container>
						<environment>
							<ENV_VAR>VALUE</ENV_VAR>
						</environment>
					</container>
                </configuration>
            </plugin>
		</plugins>
	</build>
</project>