package com.abchau.historia.subscribe.infrastructure.event;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import lombok.extern.log4j.Log4j2;

import com.abchau.historia.subscribe.domain.entity.Subscription;
// import com.abchau.historia.subscribe.domain.event.SubscriptionEvent;
import com.abchau.historia.subscribe.domain.output.SubscriptionEventPublisher;

@Log4j2
@Component
public class InMemorySubscriptionEventPublisher implements SubscriptionEventPublisher {


	@Value(value = "${historia.Subscription.event.kafka.Subscription-received-topic:Subscription-received}")
	private String receivedTopic;

	@Value(value = "${historia.Subscription.event.kafka.Subscription-Created-topic:Subscription-Created}")
	private String CreatedTopic;

	@Value(value = "${historia.Subscription.event.kafka.Subscription-validated-topic:Subscription-validated}")
	private String validatedTopic;

	@Value(value = "${historia.Subscription.event.kafka.egistration-succeeded-topic:Subscription-succeeded}")
	private String succeededTopic;

	private InMemoryEventStore inMemoryEventStore;

	@Autowired
	public InMemorySubscriptionEventPublisher(final InMemoryEventStore inMemoryEventStore) {
		this.inMemoryEventStore = inMemoryEventStore;
	}

	@Override
	public void requested(final Subscription subscription) {
		log.trace(() -> "requested()...invoked");
		// Subscription subscription = Subscription;
		
		// final SubscriptionEvent SubscriptionEvent = SubscriptionEvent.of(Subscription);

		// inMemoryEventStore.send(receivedTopic, SubscriptionEvent);
	}

	@Override
	public void Created(final Subscription subscription) {
		log.trace(() -> "Created()...invoked");
		
		// final Subscription CreatedSubscription = Subscription.Created();
		// final SubscriptionEvent SubscriptionEvent = SubscriptionEvent.of(CreatedSubscription);
		
		// inMemoryEventStore.send(CreatedTopic, SubscriptionEvent);
	}

	@Override
	public void validated(final Subscription subscription) {
		log.trace(() -> "validated()...invoked");
		
		// final Subscription validatedSubscription = Subscription.validated();
		// final SubscriptionEvent SubscriptionEvent = SubscriptionEvent.of(validatedSubscription);
		
		// inMemoryEventStore.send(validatedTopic, SubscriptionEvent);
	}

	@Override
	public void declined(Subscription subscription) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void verified(Subscription subscription) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void completed(final Subscription subscription) {
		log.trace(() -> "completeds()...invoked");
		
		// final Subscription succeededSubscription = Subscription.succeeded();
		// final SubscriptionEvent SubscriptionEvent = SubscriptionEvent.of(succeededSubscription);
		
		// inMemoryEventStore.send(succeededTopic, SubscriptionEvent);
	}

}
